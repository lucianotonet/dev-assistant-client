name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/heads/main')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install and Upgrade pip and Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry pyinstaller

      - name: Build EXE
        run: |
          poetry run pyinstaller ./dev_assistant_client/dev_assistant_client.py --name dev-assistant --onefile --noconfirm --clean --icon=./icon.ico

  version_bump_and_release:
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/heads/main')
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install and Upgrade pip and Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry toml

      - name: Bump Version and Push Tag
        run: python version_bump.py
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

  deploy:
    needs: version_bump_and_release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Build and publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry build
          poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}